---
description: 
globs: 
alwaysApply: true
---
# 代码风格与格式规则

## TypeScript/JavaScript 编码规范

- 使用 TypeScript 类型，避免使用 `any` 类型
- 优先使用 `const` 声明变量，除非变量需要重新赋值，才使用 `let`
- 避免使用 `var` 声明变量
- 组件和自定义钩子使用函数声明式写法，命名以大写字母开头
- 使用单引号 `'` 包裹字符串
- 使用模板字符串进行字符串拼接，避免使用 `+` 连接符
- 数组方法优先使用函数式编程风格（map, filter, reduce 等）
- 异步操作优先使用 async/await，避免直接使用 Promise 链
- 每行代码不超过 100 个字符
- 缩进使用 2 个空格
- 函数参数超过 3 个时，考虑使用对象作为参数

## React 组件编写规范

- 函数组件使用命名导出，不使用默认导出
- 组件 Props 使用 TypeScript 接口定义
- 相关状态使用 `useReducer` 管理，简单状态使用 `useState`
- 避免在渲染期间进行复杂计算，使用 `useMemo` 优化
- 避免不必要的渲染，使用 `useCallback` 优化事件处理函数
- 组件拆分原则：单一职责，复用性，可测试性
- 事件处理函数命名规则：`handle` + 名词 + 动词，如 `handleInputChange`

## 导入/导出规范

- 导入顺序：
  1. 外部库导入（react, react-dom 等）
  2. 内部模块导入（相对路径导入）
  3. 类型导入
  4. CSS/SCSS 导入
- 每个导入语句单独一行
- 避免使用通配符导入（`import * as X`）

## 文件组织规范

- 每个文件应该只导出一个组件或功能模块
- 文件命名使用帕斯卡命名法（PascalCase）或连字符命名法（kebab-case）
- 相关的组件和功能应当放在同一目录下
- 公共组件放在 `components` 目录
- 共享钩子放在 `hooks` 目录
- 工具函数放在 `utils` 目录
- 常量定义放在 `constants` 目录
- 类型定义放在 `types` 目录或与组件同级的 `types.ts` 文件

## 注释规范

- 关键业务逻辑需要添加注释说明
- 复杂算法需要添加详细注释
- 使用 JSDoc 风格的注释为函数和方法添加文档
- 临时代码使用 `// TODO:` 标记
- 需要修复的问题使用 `// FIXME:` 标记

