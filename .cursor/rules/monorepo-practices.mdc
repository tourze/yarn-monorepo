---
description: 
globs: 
alwaysApply: true
---
# Monorepo 最佳实践

## 项目结构

- 所有包都放在 `packages` 目录下
- 每个包应该有自己的 `package.json` 文件和独立的版本号
- 共享配置文件放在根目录
- 包之间的依赖关系应该在各自的 `package.json` 文件中明确声明

## 依赖管理

- 尽量将共用依赖提升到根目录的 `package.json` 中
- 使用 `yarn` 的工作区功能管理依赖
- 避免包之间的循环依赖
- 使用 `yarn resolutions` 解决依赖版本冲突
- 对于特定包的依赖，应该在该包的 `package.json` 中声明

## 版本管理

- 遵循语义化版本规范 (SemVer)
- 使用 `lerna` 或类似工具管理版本发布
- 保持包版本的一致性，尤其是相互依赖的包
- 每次发布前更新 CHANGELOG.md

## 构建和测试

- 优先配置包级别的构建和测试脚本
- 在根目录提供整体构建和测试的命令
- 设置变更检测，只构建和测试受影响的包
- 测试应覆盖包边界的集成测试

## 工作流程

- 使用 `yarn workspace package-name` 执行特定包的命令
- 在开发时，优先在包目录下工作，而不是在根目录
- 使用 `yarn workspaces run command` 在所有包上执行命令
- 提交代码前，确保所有修改过的包都通过了测试

## 性能优化

- 使用缓存加速构建过程
- 配置并行执行任务
- 对于大型 monorepo，考虑使用增量构建
- 利用 Yarn 2+ 的 PnP 功能提高依赖解析速度

## 持续集成

- 配置 CI 工作流，既测试整个仓库，也单独测试各个包
- 使用缓存加速 CI 流程
- 针对不同的包配置不同的部署流程
- 实现自动拆分功能，将改动同步到独立仓库