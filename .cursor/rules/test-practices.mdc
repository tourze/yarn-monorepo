---
description: 
globs: tests/*
alwaysApply: false
---
# 单元测试最佳实践

## 通用测试原则

- 测试应该是独立的，一个测试不应该依赖另一个测试
- 测试应该是可重复的，每次运行都应该产生相同的结果
- 测试应该是简单且易于理解的
- 每个测试应该专注于一个特定的功能点
- 尽量避免在测试中使用条件逻辑和循环

## 命名约定

- 测试文件名应该和被测试的组件/模块名相同，后缀为 `.test.ts` 或 `.spec.ts`
- 测试套件（describe）应该描述被测试的组件/模块
- 测试用例（it/test）应该清晰描述测试的行为，格式为："动词 + 预期行为 + 条件（可选）"
  - 例如："renders correctly with default props"
  - 例如："throws an error when input is invalid"

## 组织结构

- 使用 `describe` 块组织相关测试
- 使用嵌套的 `describe` 块对复杂组件的不同方面进行分组
- 使用 `beforeEach`/`afterEach` 进行每个测试前后的设置和清理
- 使用 `beforeAll`/`afterAll` 进行一次性的设置和清理
- 将通用的测试工具和模拟放在单独的辅助文件中

## 断言最佳实践

- 每个测试应该至少有一个断言
- 断言应该精确，不要过度断言
- 对于 React 组件测试，优先断言用户可见的行为而不是内部状态
- 使用恰当的匹配器（例如 `toEqual` 而不是 `toBe` 进行对象比较）
- 对于异步代码，确保使用 `async/await` 或正确处理 Promise

## 模拟策略

- 模拟外部依赖，如 API 调用、数据库访问等
- 对于第三方库，尽可能使用真实的实现，除非它们引入了复杂的依赖
- 模拟函数应该尽可能简单，只返回测试所需的数据
- 使用 jest.mock() 进行模块级别的模拟
- 使用 vi.mock() 进行 Vitest 环境下的模拟

## React 组件测试实践

- 使用 React Testing Library 或 Enzyme 进行组件测试
- 优先使用 React Testing Library 的查询方法，按照优先级：getByRole > getByLabelText > getByPlaceholderText > getByText > getByDisplayValue > getByAltText > getByTitle > getByTestId
- 测试用户交互，如点击、输入等
- 验证组件渲染的内容，而不是内部实现
- 测试组件在不同 props 和状态下的行为

## 覆盖率目标

- 函数覆盖率：95%+
- 语句覆盖率：90%+
- 分支覆盖率：85%+
- 行覆盖率：90%+
- 优先测试复杂的业务逻辑和容易出错的代码
